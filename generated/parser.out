Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> PRINT expression
Rule 6     structure -> WHILE expression { programme }
Rule 7     structure -> IF expression { programme }
Rule 8     expression -> expression ADD_OP expression
Rule 9     expression -> expression MUL_OP expression
Rule 10    expression -> expression MOD expression
Rule 11    expression -> expression POW expression
Rule 12    expression -> NUMBER
Rule 13    expression -> IDENTIFIER
Rule 14    expression -> ( expression )
Rule 15    expression -> ADD_OP expression
Rule 16    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 14
)                    : 14
;                    : 2
=                    : 16
ADD_OP               : 8 15
IDENTIFIER           : 13 16
IF                   : 7
MOD                  : 10
MUL_OP               : 9
NUMBER               : 12
POW                  : 11
PRINT                : 5
WHILE                : 6
error                : 
{                    : 6 7
}                    : 6 7

Nonterminals, with rules where they appear

assignation          : 3
expression           : 5 6 7 8 8 9 9 10 10 11 11 14 15 16
programme            : 2 6 7 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (16) assignation -> . IDENTIFIER = expression
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . IF expression { programme }

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 9


state 3

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 5

    (5) statement -> PRINT . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . expression MOD expression
    (11) expression -> . expression POW expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 10

state 6

    (16) assignation -> IDENTIFIER . = expression

    =               shift and go to state 15


state 7

    (6) structure -> WHILE . expression { programme }
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . expression MOD expression
    (11) expression -> . expression POW expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 16

state 8

    (7) structure -> IF . expression { programme }
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . expression MOD expression
    (11) expression -> . expression POW expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 17

state 9

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (16) assignation -> . IDENTIFIER = expression
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . IF expression { programme }

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8

    statement                      shift and go to state 2
    programme                      shift and go to state 18
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 10

    (5) statement -> PRINT expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (10) expression -> expression . MOD expression
    (11) expression -> expression . POW expression

    ;               reduce using rule 5 (statement -> PRINT expression .)
    $end            reduce using rule 5 (statement -> PRINT expression .)
    }               reduce using rule 5 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 19
    MUL_OP          shift and go to state 20
    MOD             shift and go to state 21
    POW             shift and go to state 22


state 11

    (15) expression -> ADD_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . expression MOD expression
    (11) expression -> . expression POW expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 23

state 12

    (12) expression -> NUMBER .

    ADD_OP          reduce using rule 12 (expression -> NUMBER .)
    MUL_OP          reduce using rule 12 (expression -> NUMBER .)
    MOD             reduce using rule 12 (expression -> NUMBER .)
    POW             reduce using rule 12 (expression -> NUMBER .)
    ;               reduce using rule 12 (expression -> NUMBER .)
    $end            reduce using rule 12 (expression -> NUMBER .)
    }               reduce using rule 12 (expression -> NUMBER .)
    {               reduce using rule 12 (expression -> NUMBER .)
    )               reduce using rule 12 (expression -> NUMBER .)


state 13

    (13) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 13 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 13 (expression -> IDENTIFIER .)
    MOD             reduce using rule 13 (expression -> IDENTIFIER .)
    POW             reduce using rule 13 (expression -> IDENTIFIER .)
    ;               reduce using rule 13 (expression -> IDENTIFIER .)
    $end            reduce using rule 13 (expression -> IDENTIFIER .)
    }               reduce using rule 13 (expression -> IDENTIFIER .)
    {               reduce using rule 13 (expression -> IDENTIFIER .)
    )               reduce using rule 13 (expression -> IDENTIFIER .)


state 14

    (14) expression -> ( . expression )
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . expression MOD expression
    (11) expression -> . expression POW expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 24

state 15

    (16) assignation -> IDENTIFIER = . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . expression MOD expression
    (11) expression -> . expression POW expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 25

state 16

    (6) structure -> WHILE expression . { programme }
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (10) expression -> expression . MOD expression
    (11) expression -> expression . POW expression

    {               shift and go to state 26
    ADD_OP          shift and go to state 19
    MUL_OP          shift and go to state 20
    MOD             shift and go to state 21
    POW             shift and go to state 22


state 17

    (7) structure -> IF expression . { programme }
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (10) expression -> expression . MOD expression
    (11) expression -> expression . POW expression

    {               shift and go to state 27
    ADD_OP          shift and go to state 19
    MUL_OP          shift and go to state 20
    MOD             shift and go to state 21
    POW             shift and go to state 22


state 18

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)
    }               reduce using rule 2 (programme -> statement ; programme .)


state 19

    (8) expression -> expression ADD_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . expression MOD expression
    (11) expression -> . expression POW expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 28

state 20

    (9) expression -> expression MUL_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . expression MOD expression
    (11) expression -> . expression POW expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 29

state 21

    (10) expression -> expression MOD . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . expression MOD expression
    (11) expression -> . expression POW expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 30

state 22

    (11) expression -> expression POW . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . expression MOD expression
    (11) expression -> . expression POW expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 11

    expression                     shift and go to state 31

state 23

    (15) expression -> ADD_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (10) expression -> expression . MOD expression
    (11) expression -> expression . POW expression

    ADD_OP          reduce using rule 15 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 15 (expression -> ADD_OP expression .)
    MOD             reduce using rule 15 (expression -> ADD_OP expression .)
    POW             reduce using rule 15 (expression -> ADD_OP expression .)
    ;               reduce using rule 15 (expression -> ADD_OP expression .)
    $end            reduce using rule 15 (expression -> ADD_OP expression .)
    }               reduce using rule 15 (expression -> ADD_OP expression .)
    {               reduce using rule 15 (expression -> ADD_OP expression .)
    )               reduce using rule 15 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 19 ]
  ! MUL_OP          [ shift and go to state 20 ]
  ! MOD             [ shift and go to state 21 ]
  ! POW             [ shift and go to state 22 ]


state 24

    (14) expression -> ( expression . )
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (10) expression -> expression . MOD expression
    (11) expression -> expression . POW expression

    )               shift and go to state 32
    ADD_OP          shift and go to state 19
    MUL_OP          shift and go to state 20
    MOD             shift and go to state 21
    POW             shift and go to state 22


state 25

    (16) assignation -> IDENTIFIER = expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (10) expression -> expression . MOD expression
    (11) expression -> expression . POW expression

    ;               reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 19
    MUL_OP          shift and go to state 20
    MOD             shift and go to state 21
    POW             shift and go to state 22


state 26

    (6) structure -> WHILE expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (16) assignation -> . IDENTIFIER = expression
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . IF expression { programme }

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8

    programme                      shift and go to state 33
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 27

    (7) structure -> IF expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (16) assignation -> . IDENTIFIER = expression
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . IF expression { programme }

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8

    programme                      shift and go to state 34
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 28

    (8) expression -> expression ADD_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (10) expression -> expression . MOD expression
    (11) expression -> expression . POW expression

    ADD_OP          reduce using rule 8 (expression -> expression ADD_OP expression .)
    MOD             reduce using rule 8 (expression -> expression ADD_OP expression .)
    POW             reduce using rule 8 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 8 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 8 (expression -> expression ADD_OP expression .)
    }               reduce using rule 8 (expression -> expression ADD_OP expression .)
    {               reduce using rule 8 (expression -> expression ADD_OP expression .)
    )               reduce using rule 8 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 20

  ! MUL_OP          [ reduce using rule 8 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 19 ]
  ! MOD             [ shift and go to state 21 ]
  ! POW             [ shift and go to state 22 ]


state 29

    (9) expression -> expression MUL_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (10) expression -> expression . MOD expression
    (11) expression -> expression . POW expression

    ADD_OP          reduce using rule 9 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 9 (expression -> expression MUL_OP expression .)
    MOD             reduce using rule 9 (expression -> expression MUL_OP expression .)
    POW             reduce using rule 9 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 9 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 9 (expression -> expression MUL_OP expression .)
    }               reduce using rule 9 (expression -> expression MUL_OP expression .)
    {               reduce using rule 9 (expression -> expression MUL_OP expression .)
    )               reduce using rule 9 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 19 ]
  ! MUL_OP          [ shift and go to state 20 ]
  ! MOD             [ shift and go to state 21 ]
  ! POW             [ shift and go to state 22 ]


state 30

    (10) expression -> expression MOD expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (10) expression -> expression . MOD expression
    (11) expression -> expression . POW expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    ;               reduce using rule 10 (expression -> expression MOD expression .)
    $end            reduce using rule 10 (expression -> expression MOD expression .)
    }               reduce using rule 10 (expression -> expression MOD expression .)
    {               reduce using rule 10 (expression -> expression MOD expression .)
    )               reduce using rule 10 (expression -> expression MOD expression .)
    ADD_OP          shift and go to state 19
    MUL_OP          shift and go to state 20
    MOD             shift and go to state 21
    POW             shift and go to state 22

  ! ADD_OP          [ reduce using rule 10 (expression -> expression MOD expression .) ]
  ! MUL_OP          [ reduce using rule 10 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 10 (expression -> expression MOD expression .) ]
  ! POW             [ reduce using rule 10 (expression -> expression MOD expression .) ]


state 31

    (11) expression -> expression POW expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (10) expression -> expression . MOD expression
    (11) expression -> expression . POW expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    ;               reduce using rule 11 (expression -> expression POW expression .)
    $end            reduce using rule 11 (expression -> expression POW expression .)
    }               reduce using rule 11 (expression -> expression POW expression .)
    {               reduce using rule 11 (expression -> expression POW expression .)
    )               reduce using rule 11 (expression -> expression POW expression .)
    ADD_OP          shift and go to state 19
    MUL_OP          shift and go to state 20
    MOD             shift and go to state 21
    POW             shift and go to state 22

  ! ADD_OP          [ reduce using rule 11 (expression -> expression POW expression .) ]
  ! MUL_OP          [ reduce using rule 11 (expression -> expression POW expression .) ]
  ! MOD             [ reduce using rule 11 (expression -> expression POW expression .) ]
  ! POW             [ reduce using rule 11 (expression -> expression POW expression .) ]


state 32

    (14) expression -> ( expression ) .

    ADD_OP          reduce using rule 14 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 14 (expression -> ( expression ) .)
    MOD             reduce using rule 14 (expression -> ( expression ) .)
    POW             reduce using rule 14 (expression -> ( expression ) .)
    ;               reduce using rule 14 (expression -> ( expression ) .)
    $end            reduce using rule 14 (expression -> ( expression ) .)
    }               reduce using rule 14 (expression -> ( expression ) .)
    {               reduce using rule 14 (expression -> ( expression ) .)
    )               reduce using rule 14 (expression -> ( expression ) .)


state 33

    (6) structure -> WHILE expression { programme . }

    }               shift and go to state 35


state 34

    (7) structure -> IF expression { programme . }

    }               shift and go to state 36


state 35

    (6) structure -> WHILE expression { programme } .

    ;               reduce using rule 6 (structure -> WHILE expression { programme } .)
    $end            reduce using rule 6 (structure -> WHILE expression { programme } .)
    }               reduce using rule 6 (structure -> WHILE expression { programme } .)


state 36

    (7) structure -> IF expression { programme } .

    ;               reduce using rule 7 (structure -> IF expression { programme } .)
    $end            reduce using rule 7 (structure -> IF expression { programme } .)
    }               reduce using rule 7 (structure -> IF expression { programme } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD_OP in state 30 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 30 resolved as shift
WARNING: shift/reduce conflict for MOD in state 30 resolved as shift
WARNING: shift/reduce conflict for POW in state 30 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 31 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 31 resolved as shift
WARNING: shift/reduce conflict for MOD in state 31 resolved as shift
WARNING: shift/reduce conflict for POW in state 31 resolved as shift
